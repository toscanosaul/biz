data <- read.csv("animation.txt",header=TRUE,skip=2)
data
names(data)
data$t
data <- read.csv("animation.txt",header=TRUE,skip=2)
data$t
names(data)
data <- read.csv("animation.txt",header=TRUE,skip=2)
Y <- data[,4:7]
q <- data[,8:11]
Y
plot(Y)
plot(q)
plot(Y,t="l")
plot(x=t,y=Y)
q
max(Y)
min(Y)
Y)
Y
Y[is.NaN()]
Y[is.NaN(Y)]
is.na(Y)
is.number(Y)
help(is.na)
help(is.na)
min(Y[!is.na(Y)
min(Y[!is.na(Y)])
data <- read.csv("animation.txt",header=TRUE,skip=2)
Y <- data[,4:7]
q <- data[,8:11]
winner = 1
Tmax = nrow(Y)
Ymin = 1.1*min(Y[!is.na(Y)])
Ymax = 1.1*max(Y[!is.na(Y)])
pdf("animation.pdf")
par(mfrow=c(1,2))
plot(1:t, Y[,1:t], t="l", xlim=c(1,Tmax), ylim=c(Ymin,Ymax), xlab="t", ylab="Y", ex.lab=2,lwd=2, )
dev.off()
plot(1:t, Y[,1:t], t="l", xlim=c(1,Tmax), ylim=c(Ymin,Ymax), xlab="t", ylab="Y", ex.lab=2,lwd=2, )
plot(1:t, Y[1:t,1], t="l", xlim=c(1,Tmax), ylim=c(Ymin,Ymax), xlab="t", ylab="Y", ex.lab=2,lwd=2, )
t
sprintf("%d",2)
t=100
pdf(sprintf("animation_%4d.pdf",t))
par(mfrow=c(1,2))
plot(1:t, Y[1:t,1], t="l", xlim=c(1,Tmax), ylim=c(Ymin,Ymax), xlab="t", ylab="Y", ex.lab=2,lwd=2, )
dev.off()
t
plot(1:t, Y[1:t,1], t="l", xlim=c(1,Tmax), ylim=c(Ymin,Ymax), xlab="t", ylab="Y", ex.lab=2,lwd=2, )
pdf("foo.pdf")
plot(1:t, Y[1:t,1], t="l", xlim=c(1,Tmax), ylim=c(Ymin,Ymax), xlab="t", ylab="Y", ex.lab=2,lwd=2, )
plot(1:t,Y[1:t,1])
plot(1:t, Y[1:t,1], t="l", xlim=c(1,Tmax), ylim=c(Ymin,Ymax), xlab="t", ylab="Y", cex.lab=2,lwd=2)
dev.off()
t=100
pdf(sprintf("pdf/animation_%04d.pdf",t))
par(mfrow=c(1,2))
plot(1:t, Y[1:t,1], t="l", xlim=c(1,Tmax), ylim=c(Ymin,Ymax), xlab="t", ylab="Y", cex.lab=2,lwd=2)
dev.off()
help(plot)
plot(1:t, Y[1:t,winner], t="l", xlim=c(1,Tmax), ylim=c(Ymin,Ymax), xlab="t", ylab="Y", cex.lab=2,lwd=2, col="red")
t[i] = nrow(!is.na(Y[1:t,i]))
i=2
t[i] = nrow(!is.na(Y[1:t,i]))
Y[1:t,i]
is.na(Y[1:t,i])
for (i in 1:4) {
  # Count the number of entries up to t without an NaN in column i of Y
tmp = Y[1:t,i]
tmp = tmp[!is.na(tmp)]
t[i] = nrow(tmp)
}
tmp
nrow(tmp)
length(tmp)
for (i in 1:4) {
  # Count the number of entries up to t without an NaN in column i of Y
tmp = Y[1:t,i]
tmp = tmp[!is.na(tmp)]
t[i] = length(tmp)
}
for (i in 1:4) {
  # Count the number of entries up to t without an NaN in column i of Y
tmp = Y[1:t,i]
tmp = tmp[!is.na(tmp)]
t[i] = length(tmp)
}
i
tmp = Y[1:t,i]
tmp = Y[1:t,i]
t
t=100
for (i in 1:4) {
  # Count the number of entries up to t without an NaN in column i of Y
tmp = Y[1:t,i]
tmp = tmp[!is.na(tmp)]
n[i] = length(tmp)
}
NA
n = rep(NA,4)
# For each alternative, count the number of observations up to the current time
# t, which will be less than t if Y has been eliminated.
n = rep(NA,4)
for (i in 1:4) {
tmp = Y[1:t,i]
tmp = tmp[!is.na(tmp)]
n[i] = length(tmp)
}
n
t = 1000
t=1000
pdf(sprintf("pdf/animation_%04d.pdf",t))
# For each alternative, count the number of observations up to the current time
# t, which will be less than t if Y has been eliminated.
n = rep(NA,4)
for (i in 1:4) {
tmp = Y[1:t,i]
tmp = tmp[!is.na(tmp)]
n[i] = length(tmp)
}
n
plot(1:t, Y[1:t,winner], t="l", xlim=c(1,Tmax), ylim=c(Ymin,Ymax), xlab="t", ylab="Y", cex.lab=2,lwd=2, col=my_col[winner])
my_col = c("red","blue","green","orange")
plot(1:t, Y[1:t,winner], t="l", xlim=c(1,Tmax), ylim=c(Ymin,Ymax), xlab="t", ylab="Y", cex.lab=2,lwd=2, col=my_col[winner])
for (i in 1:4) {
  lines(1:n[i], Y[1:n[i],i], col=my_col[i])
}
data <- read.csv("animation.txt",header=TRUE,skip=2)
Y <- data[,4:7]
q <- data[,8:11]
winner = 1
Tmax = nrow(Y)
Ymin = 1.1*min(Y[!is.na(Y)])
Ymax = 1.1*max(Y[!is.na(Y)])
t=1000
# For each alternative, count the number of observations up to the current time
# t, which will be less than t if Y has been eliminated.
n = rep(NA,4)
for (i in 1:4) {
tmp = Y[1:t,i]
tmp = tmp[!is.na(tmp)]
n[i] = length(tmp)
}
my_col = c("red","blue","green","orange")
pdf(sprintf("pdf/animation_%04d.pdf",t))
par(mfrow=c(1,2))
# Plot the Y values
plot(1:t, Y[1:t,winner], t="l", xlim=c(1,Tmax), ylim=c(Ymin,Ymax), xlab="t", ylab="Y(t,x)", cex.lab=2,lwd=2, col=my_col[winner])
for (i in 1:4) {
  lines(1:n[i], Y[1:n[i],i], col=my_col[i])
}
# Plot the q values
plot(1:t, q[1:t,winner], t="l", xlim=c(1,Tmax), ylim=c(0,1), xlab="t", ylab="q(t,x)", cex.lab=2,lwd=2, col=my_col[winner])
for (i in 1:4) {
  lines(1:n[i], Y[1:n[i],i], col=my_col[i])
}
dev.off()
q[,3]
my_col = c("red","blue","green","orange")
t=1000
# For each alternative, count the number of observations up to the current time
# t, which will be less than t if Y has been eliminated.
n = rep(NA,4)
for (i in 1:4) {
tmp = Y[1:t,i]
tmp = tmp[!is.na(tmp)]
n[i] = length(tmp)
}
pdf(sprintf("pdf/animation_%04d.pdf",t))
par(mfrow=c(1,2))
# Plot the Y values
plot(1:t, Y[1:t,winner], t="l", xlim=c(1,Tmax), ylim=c(Ymin,Ymax), xlab="t", ylab="Y(t,x)", cex.lab=2,lwd=2, col=my_col[winner])
for (i in 1:4) {
  lines(1:n[i], Y[1:n[i],i], col=my_col[i])
}
# Plot the q values
plot(1:t, q[1:t,winner], t="l", xlim=c(1,Tmax), ylim=c(0,1), xlab="t", ylab="q(t,x)", cex.lab=2,lwd=2, col=my_col[winner])
for (i in 1:4) {
  lines(1:n[i], q[1:n[i],i], col=my_col[i])
}
dev.off()
for (i in 1:4) {
tmp = Y[1:t,i]
tmp = tmp[!is.na(tmp)]
n[i] = length(tmp)
}
for (i in 1:4) {
tmp = Y[1:t,i]
tmp = tmp[!is.na(tmp)]
n[i] = length(tmp)
}
sum(q)
sum(q')
;
q
sum(q)
help(sum)
q[1,]
q[2,]
q[3,]
q[4,]
Y[1,]
q[1,] = q[1,] / sum(q[1,])
q[1,]
names(data)
data <- read.csv("animation.txt",header=TRUE,skip=2)
Y <- data[,4:7]
q <- data[,8:11]
# The code doesn't output the correct value for q[1,], i.e., the value of q at the initial time.
q[1,] = q[1,] / sum(q[1,])
winner = 1
Tmax = nrow(Y)
Ymin = 1.1*min(Y[!is.na(Y)])
Ymax = 1.1*max(Y[!is.na(Y)])
my_col = c("red","blue","green","orange")
for (t in 1:Tmax) {
# For each alternative, count the number of observations up to the current time
# t, which will be less than t if Y has been eliminated.
n = rep(NA,4)
for (i in 1:4) {
tmp = Y[1:t,i]
tmp = tmp[!is.na(tmp)]
n[i] = length(tmp)
}
pdf(sprintf("pdf/animation_%04d.pdf",t))
par(mfrow=c(2,1))
# Plot the Y values
plot(1:t, Y[1:t,winner], t="l", xlim=c(1,Tmax), ylim=c(Ymin,Ymax), xlab="t", ylab="Y(t,x)", cex.lab=2,lwd=2, col=my_col[winner])
for (i in 1:4) {
  lines(1:n[i], Y[1:n[i],i], col=my_col[i])
}
# Plot the q values
plot(1:t, q[1:t,winner], t="l", xlim=c(1,Tmax), ylim=c(0,1), xlab="t", ylab="q(t,x)", cex.lab=2,lwd=2, col=my_col[winner])
for (i in 1:4) {
  lines(1:n[i], q[1:n[i],i], col=my_col[i])
}
lines(1:t,data$Pstar[1:t])
lines(1:t,data$LowerEliminationThreshold[1:t])
}
dev.off()
data <- read.csv("animation.txt",header=TRUE,skip=2)
Y <- data[,4:7]
q <- data[,8:11]
# The code doesn't output the correct value for q[1,], i.e., the value of q at the initial time.
q[1,] = q[1,] / sum(q[1,])
winner = 1
Tmax = nrow(Y)
Ymin = 1.1*min(Y[!is.na(Y)])
Ymax = 1.1*max(Y[!is.na(Y)])
my_col = c("red","blue","green","orange")
for (t in 1:Tmax) {
# For each alternative, count the number of observations up to the current time
# t, which will be less than t if Y has been eliminated.
n = rep(NA,4)
for (i in 1:4) {
tmp = Y[1:t,i]
tmp = tmp[!is.na(tmp)]
n[i] = length(tmp)
}
pdf(sprintf("pdf/animation_%04d.pdf",t))
par(mfrow=c(2,1))
# Plot the Y values
plot(1:t, Y[1:t,winner], t="l", xlim=c(1,Tmax), ylim=c(Ymin,Ymax), xlab="t", ylab="Y(t,x)", cex.lab=2,lwd=2, col=my_col[winner])
for (i in 1:4) {
  lines(1:n[i], Y[1:n[i],i], col=my_col[i])
}
# Plot the q values
plot(1:t, q[1:t,winner], t="l", xlim=c(1,Tmax), ylim=c(0,1), xlab="t", ylab="q(t,x)", cex.lab=2,lwd=2, col=my_col[winner])
for (i in 1:4) {
  lines(1:n[i], q[1:n[i],i], col=my_col[i])
}
lines(1:t,data$Pstar[1:t])
lines(1:t,data$LowerEliminationThreshold[1:t])
dev.off()
}
data$LowerEliminationThreshold
data$Pstar
data
data[1,]
data[1,1]
data[1,2]
data[1,3]
data[1,1]
data$t
lower <- data[,1]
upper <- data[,2]
lower
upper
help(lower)
help(upper)
data <- read.csv("animation.txt",header=FALSE,skip=2)
Y <- data[,4:7]
q <- data[,8:11]
lower <- data[,1]
upper <- data[,2]
# The code doesn't output the correct value for q[1,], i.e., the value of q at the initial time.
q[1,] = q[1,] / sum(q[1,])
winner = 1
Tmax = nrow(Y)
Ymin = 1.1*min(Y[!is.na(Y)])
Ymax = 1.1*max(Y[!is.na(Y)])
my_col = c("red","blue","green","orange")
for (t in 1:Tmax) {
# For each alternative, count the number of observations up to the current time
# t, which will be less than t if Y has been eliminated.
n = rep(NA,4)
for (i in 1:4) {
tmp = Y[1:t,i]
tmp = tmp[!is.na(tmp)]
n[i] = length(tmp)
}
pdf(sprintf("pdf/animation_%04d.pdf",t))
par(mfrow=c(2,1))
# Plot the Y values
plot(1:t, Y[1:t,winner], t="l", xlim=c(1,Tmax), ylim=c(Ymin,Ymax), xlab="t", ylab="Y(t,x)", cex.lab=2,lwd=2, col=my_col[winner])
for (i in 1:4) {
  lines(1:n[i], Y[1:n[i],i], col=my_col[i])
}
# Plot the q values
plot(1:t, q[1:t,winner], t="l", xlim=c(1,Tmax), ylim=c(0,1), xlab="t", ylab="q(t,x)", cex.lab=2,lwd=2, col=my_col[winner])
for (i in 1:4) {
  lines(1:n[i]
data <- read.csv("animation.txt",header=FALSE,skip=2)
Y <- data[,4:7]
q <- data[,8:11]
lower <- data[,1]
upper <- data[,2]
# The code doesn't output the correct value for q[1,], i.e., the value of q at the initial time.
q[1,] = q[1,] / sum(q[1,])
winner = 1
Tmax = nrow(Y)
Ymin = 1.1*min(Y[!is.na(Y)])
Ymax = 1.1*max(Y[!is.na(Y)])
my_col = c("red","blue","green","orange")
for (t in 1:Tmax) {
# For each alternative, count the number of observations up to the current time
# t, which will be less than t if Y has been eliminated.
n = rep(NA,4)
for (i in 1:4) {
tmp = Y[1:t,i]
tmp = tmp[!is.na(tmp)]
n[i] = length(tmp)
}
pdf(sprintf("pdf/animation_%04d.pdf",t))
par(mfrow=c(2,1))
# Plot the Y values
plot(1:t, Y[1:t,winner], t="l", xlim=c(1,Tmax), ylim=c(Ymin,Ymax), xlab="t", ylab="Y(t,x)", cex.lab=2,lwd=2, col=my_col[winner])
for (i in 1:4) {
  lines(1:n[i], Y[1:n[i],i], col=my_col[i])
}
# Plot the q values
plot(1:t, q[1:t,winner], t="l", xlim=c(1,Tmax), ylim=c(0,1), xlab="t", ylab="q(t,x)", cex.lab=2,lwd=2, col=my_col[winner])
for (i in 1:4) {
  lines(1:n[i]
quit()
